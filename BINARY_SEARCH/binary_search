#include<iostream>
#include<chrono>
#include<cstdlib>
#include<algorithm>
using namespace std;
using namespace std::chrono;

int binarySearch(const int arr[], int size, int target) {
    int low = 0;
    int high = size - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == target) {
            return mid;  // Target found
        } else if (arr[mid] > target) {
            high = mid - 1;  // Adjust the search interval
        } else {
            low = mid + 1;   // Adjust the search interval
        }
    }

    return -1;  // Target not found
}
int* generate_numbers(int g) {
    int *arr = new int[g];
    for (int j = 0; j < g; j++) {
        arr[j] = rand();
    }
    return arr;
}
int main() {


    for (int i = 1000; i <= 9000; i += 200) {
        int* arr = generate_numbers(i); 
        int target = arr[rand()%i];

        auto start = high_resolution_clock::now();

        for (int m = 1; m <= 10; m++) {
            binarySearch(arr, i , target);
        }

        auto stop = high_resolution_clock::now();

        auto duration = duration_cast<nanoseconds>(stop - start) / 10;

        cout << i << "\t" << duration.count() << endl;

        delete[] arr;  
    }

    return 0;
}
