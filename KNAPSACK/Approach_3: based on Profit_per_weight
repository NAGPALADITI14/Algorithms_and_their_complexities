#include<iostream>
#include<chrono>
#include<cstdlib>
#include<algorithm>
using namespace std;
using namespace std::chrono;

struct Item {
    int profit;
    int weight;
    double profitPerWeight; 
};

// Function to compare items based on the ratio of profits to weights in non-increasing order
bool compareItems(const Item& a, const Item& b) {
    return a.profitPerWeight > b.profitPerWeight;
}

// APPROACH: Sort items based on the ratio of profits to weights in non-increasing order
void KNAPSACK(int n, int max_weight, Item items[]) {
    for (int i = 0; i < n; i++) {
        items[i].profitPerWeight = static_cast<double>(items[i].profit) / items[i].weight;
    }

    sort(items, items + n, compareItems);

    int i, j;
    int K[n + 1][max_weight + 1];

    for (i = 0; i <= n; i++) {
        for (j = 0; j <= max_weight; j++) {
            if (i == 0 || j == 0)
                K[i][j] = 0;
            else if (items[i - 1].weight <= j)
                K[i][j] = max(items[i - 1].profit + K[i - 1][j - items[i - 1].weight], K[i - 1][j]);
            else
                K[i][j] = K[i - 1][j];
        }
    }
}

Item* generate_items(int n) {
    Item* items = new Item[n];
    for (int j = 0; j < n; j++) {
        items[j].profit = rand();  
        items[j].weight = rand() ;   
    }
    return items;
}

int main() {
    int max_weight = 550000;

    for (int i = 100000; i <= 500000; i += 20000) {
        Item* items = generate_items(i);

        auto start = high_resolution_clock::now();

        for (int m = 1; m <= 10; m++) {
            KNAPSACK(i, max_weight, items);
        }

        auto stop = high_resolution_clock::now();

        auto duration = duration_cast<nanoseconds>(stop - start) / 10;

        cout << i << "\t" << duration.count() << endl;

        delete[] items;
    }

    return 0;
}
