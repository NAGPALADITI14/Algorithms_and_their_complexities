#include<iostream>
#include<chrono>
#include<cstdlib>
using namespace std;
using namespace std::chrono;

int Partition(int arr[],int begin, int end)
{    
    int i=begin-1;
    int pivot=arr[end];
    
    for(int j=begin;j<end;j++)
    {
        if(arr[j]<pivot)
        {
            i=i+1;
            swap(arr[j],arr[i]);
        }
    }
    i=i+1;
    swap(arr[i],pivot);
    return i;   
}

void QuickSort(int arr[], int begin,int end)
{
    if(begin<end)
    {
        int division = Partition(arr,begin,end);
        QuickSort(arr,begin,division-1);
        QuickSort(arr,division+1,end);
    }
}
int* generate_numbers(int g) {
    int *arr = new int[g];
    for (int j = 0; j < g; j++) {
        arr[j] = rand();
    }
    return arr;
}

int main() {
    for (int i = 5000; i <= 20000; i += 2000) {
        int *arr = generate_numbers(i);

        auto start = high_resolution_clock::now();

        for (int m = 1; m <= 10; m++) {
            QuickSort(arr, 0, i - 1);
        }

        auto stop = high_resolution_clock::now();

        auto duration = duration_cast<nanoseconds>(stop - start) / 10;

        cout <<"(" <<i <<","<< "\t" << duration.count()<<")," << endl;

        delete[] arr; 
    }

    return 0;
}

