#include <iostream>
#include <vector>
using namespace std;


bool isSafe(int v, int k, vector<int>& color, vector<vector<int>>& graph, int c) {
    for (int i = 0; i < v; i++) {
        if (graph[v][i] && color[i] == k)
            return false;
    }
    return true;
}

bool m_coloring(int v, vector<vector<int>>& graph, vector<int>& color, int k, int c) {
    if (k == v)
        return true;

    for (int i = 1; i <= c; i++) {
        if (isSafe(k, i, color, graph, c)) {
            color[k] = i;
            if (m_coloring(v, graph, color, k + 1, c))
                return true;
            color[k] = 0;
        }
    }
    return false;
}

int main() {
    int v, c;
    cout << "Enter number of vertices: ";
    cin >> v;
    cout << "Enter number of colors: ";
    cin >> c;

    vector<vector<int>> graph(v, vector<int>(v, 0));
    vector<int> color(v, 0);

    cout << "Enter the adjacency matrix:" << endl;
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            cin >> graph[i][j];
        }
    }

    if (m_coloring(v, graph, color, 0, c)) {
        cout << "Colors assigned to vertices: ";
        for (int i = 0; i < v; i++) {
            cout << color[i] << " ";
        }
        cout << endl;
    } else {
        cout << "Graph can't be colored using " << c << " colors." << endl;
    }

    return 0;
}
